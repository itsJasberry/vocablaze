// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  USER
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                    String                 @id @default(cuid())
  firstName             String?
  lastName              String?
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  isPremium             Boolean?
  isTwoFactorEnabled    Boolean                @default(false)
  folders               Folder[]
  wordSets              WordSet[]
  twoFactorConfirmation TwoFactorConfirmation?
  accounts              Account[]
  progressSets          ProgressSet[]
}

model Folder {
  id       String    @id @default(cuid())
  name     String
  icon     String?
  userId   String
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  wordSets WordSet[]
}

model Language {
  id             String    @id @default(cuid())
  name           String
  wordSetsFirst  WordSet[] @relation("firstLanguage")
  wordSetsSecond WordSet[] @relation("secondLanguage")
}

model ProgressSet {
  id            String         @id @default(cuid())
  progressValue Int
  wordSetId     String
  createdAt     DateTime       @default(now())
  wordSet       WordSet        @relation(fields: [wordSetId], references: [id], onDelete: Cascade)
  progressWords ProgressWord[]
  User          User?          @relation(fields: [userId], references: [id])
  userId        String?
}

model ProgressWord {
  id                    String                @id @default(cuid())
  isCorrectAnswer       Boolean
  answerDate            DateTime?
  progressSetId         String
  wordId                String
  progressSet           ProgressSet           @relation(fields: [progressSetId], references: [id], onDelete: Cascade)
  word                  Word                  @relation(fields: [wordId], references: [id], onDelete: Cascade)
  progressWordHistories ProgressWordHistory[]
}

model ProgressWordHistory {
  id             String       @id @default(cuid())
  progressWordId String
  date           DateTime
  progressWord   ProgressWord @relation(fields: [progressWordId], references: [id], onDelete: Cascade)
}

model QuizType {
  id               String            @id @default(cuid())
  name             String
  description      String?
  numRows          Int
  numColumns       Int
  createdAt        DateTime          @default(now())
  quizTypeWordSets QuizTypeWordSet[]
}

model QuizTypeWordSet {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  quizTypeId String
  wordSetId  String
  quizType   QuizType @relation(fields: [quizTypeId], references: [id], onDelete: Cascade)
  wordSet    WordSet  @relation(fields: [wordSetId], references: [id], onDelete: Cascade)
}

model Word {
  id             String         @id @default(cuid())
  originalWord   String
  translatedWord String
  wordSetId      String
  wordSet        WordSet        @relation(fields: [wordSetId], references: [id], onDelete: Cascade)
  progressWords  ProgressWord[]
}

model WordSet {
  id               String            @id @default(cuid())
  title            String            @unique
  description      String?
  firstLanguageId  String
  secondLanguageId String
  isShared         Boolean
  createdAt        DateTime          @default(now())
  updatedAt        DateTime?         @updatedAt
  userId           String
  folderId         String?
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  folder           Folder?           @relation(fields: [folderId], references: [id], onDelete: Cascade)
  firstLanguage    Language          @relation("firstLanguage", fields: [firstLanguageId], references: [id], onDelete: Cascade)
  secondLanguage   Language          @relation("secondLanguage", fields: [secondLanguageId], references: [id], onDelete: Cascade)
  words            Word[]
  progressSets     ProgressSet[]
  quizTypeWordSets QuizTypeWordSet[]
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}
